e8a7e4fbf11fbd3765c6e52fe3432a78
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _reactNative = require("react-native");

var _sheet = _interopRequireDefault(require("./sheet"));

var _style = _interopRequireDefault(require("./style"));

var _value = _interopRequireDefault(require("./value"));

var _vars = _interopRequireDefault(require("./replacers/vars"));

var _mediaQueries = _interopRequireDefault(require("./replacers/media-queries"));

var _child = _interopRequireDefault(require("./child"));

var BUILD_EVENT = 'build';

var EStyleSheet = function () {
  function EStyleSheet() {
    (0, _classCallCheck2.default)(this, EStyleSheet);
    this.child = _child.default;
    this.builded = false;
    this.sheets = [];
    this.globalVars = null;
    this.listeners = {};

    this._proxyToOriginal();
  }

  (0, _createClass2.default)(EStyleSheet, [{
    key: "create",
    value: function create(obj) {
      var sheet = new _sheet.default(obj);
      this.sheets.push(sheet);

      if (this.builded) {
        sheet.calc(this.globalVars);
      }

      return sheet.getResult();
    }
  }, {
    key: "build",
    value: function build(rawGlobalVars) {
      this.builded = true;

      this._calcGlobalVars(rawGlobalVars);

      this._calcSheets();

      this._callListeners(BUILD_EVENT);
    }
  }, {
    key: "value",
    value: function value(expr, prop) {
      var varsArr = this.globalVars ? [this.globalVars] : [];
      return new _value.default(expr, prop, varsArr).calc();
    }
  }, {
    key: "subscribe",
    value: function subscribe(event, listener) {
      this._assertSubscriptionParams(event, listener);

      this.listeners[BUILD_EVENT] = this.listeners[BUILD_EVENT] || [];
      this.listeners[BUILD_EVENT].push(listener);

      if (this.builded) {
        listener();
      }
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(event, listener) {
      this._assertSubscriptionParams(event, listener);

      if (this.listeners[BUILD_EVENT]) {
        this.listeners[BUILD_EVENT] = this.listeners[BUILD_EVENT].filter(function (item) {
          return item !== listener;
        });
      }
    }
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.sheets.forEach(function (sheet) {
        return sheet.clearCache();
      });
    }
  }, {
    key: "_calcGlobalVars",
    value: function _calcGlobalVars(rawGlobalVars) {
      if (rawGlobalVars) {
        this._checkGlobalVars(rawGlobalVars);

        rawGlobalVars.$theme = rawGlobalVars.$theme || 'default';
        this.globalVars = new _style.default(rawGlobalVars, [rawGlobalVars]).calc().calculatedVars;
      }
    }
  }, {
    key: "_calcSheets",
    value: function _calcSheets() {
      var _this = this;

      this.sheets.forEach(function (sheet) {
        return sheet.calc(_this.globalVars);
      });
    }
  }, {
    key: "_callListeners",
    value: function _callListeners(event) {
      if (Array.isArray(this.listeners[event])) {
        this.listeners[event].forEach(function (listener) {
          return listener();
        });
      }
    }
  }, {
    key: "_proxyToOriginal",
    value: function _proxyToOriginal() {
      var _this2 = this;

      var props = ['setStyleAttributePreprocessor', 'hairlineWidth', 'absoluteFill', 'absoluteFillObject', 'flatten'];
      props.forEach(function (prop) {
        Object.defineProperty(_this2, prop, {
          get: function get() {
            return _reactNative.StyleSheet[prop];
          },
          enumerable: true
        });
      });
    }
  }, {
    key: "_checkGlobalVars",
    value: function _checkGlobalVars(rawGlobalVars) {
      Object.keys(rawGlobalVars).forEach(function (key) {
        if (!_vars.default.isVar(key) && !_mediaQueries.default.isMediaQuery(key)) {
          throw new Error("EStyleSheet.build() params should contain global variables (start with $) " + ("or media queries (start with @media). Got '" + key + "'."));
        }
      });
    }
  }, {
    key: "_assertSubscriptionParams",
    value: function _assertSubscriptionParams(event, listener) {
      if (event !== BUILD_EVENT) {
        throw new Error("Only '" + BUILD_EVENT + "' event is currently supported.");
      }

      if (typeof listener !== 'function') {
        throw new Error('Listener should be a function.');
      }
    }
  }]);
  return EStyleSheet;
}();

exports.default = EStyleSheet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,