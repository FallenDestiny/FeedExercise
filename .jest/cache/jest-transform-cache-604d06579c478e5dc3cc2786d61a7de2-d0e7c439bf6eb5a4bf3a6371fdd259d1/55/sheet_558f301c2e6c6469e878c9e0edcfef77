e2bfafbd7e496c0f3c74f6a2e97dd714
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _reactNative = require("react-native");

var _style = _interopRequireDefault(require("./style"));

var _utils = _interopRequireDefault(require("./utils"));

var _vars = _interopRequireDefault(require("./replacers/vars"));

var _mediaQueries = _interopRequireDefault(require("./replacers/media-queries"));

var _default = function () {
  function _default(source) {
    (0, _classCallCheck2.default)(this, _default);
    this.source = source;
    this.result = {};
    this.cache = new Map();
    this.nativeSheet = {};
    this.globalVars = null;
    this.localVars = null;
    this.allVars = null;
    this.processedSource = null;
  }

  (0, _createClass2.default)(_default, [{
    key: "calc",
    value: function calc(globalVars) {
      this.globalVars = globalVars;
      this.clearResult();

      if (this.hasCache()) {
        this.applyCache();
      } else {
        this.processMediaQueries();
        this.calcVars();
        this.calcStyles();
        this.calcNative();
        this.storeCache();
      }

      return this.getResult();
    }
  }, {
    key: "processMediaQueries",
    value: function processMediaQueries() {
      this.processedSource = _mediaQueries.default.process(this.source);
    }
  }, {
    key: "calcVars",
    value: function calcVars() {
      var rawLocalVars = _vars.default.extract(this.processedSource);

      if (rawLocalVars) {
        this.localVars = new _style.default(rawLocalVars, [rawLocalVars, this.globalVars]).calc().calculatedVars;
        (0, _extends2.default)(this.result, this.localVars);
      } else {
        this.localVars = null;
      }

      this.allVars = [this.localVars, this.globalVars].filter(Boolean);
    }
  }, {
    key: "calcStyles",
    value: function calcStyles() {
      var _this = this;

      var extractedStyles = _utils.default.excludeKeys(this.processedSource, this.localVars);

      Object.keys(extractedStyles).forEach(function (key) {
        var styles = extractedStyles[key];

        if (typeof styles === 'function') {
          styles = styles();
        }

        if (styles && typeof styles === 'object') {
          _this.calcStyle(key, styles);
        } else {
          _this.result[key] = styles;
        }
      });
    }
  }, {
    key: "calcStyle",
    value: function calcStyle(key, styleProps) {
      var style = new _style.default(styleProps, this.allVars);

      var _style$calc = style.calc(),
          calculatedProps = _style$calc.calculatedProps,
          calculatedVars = _style$calc.calculatedVars;

      var merged = (0, _extends2.default)({}, calculatedVars, calculatedProps);

      if (key.charAt(0) === '_') {
        this.result[key] = merged;
      } else {
        this.result['_' + key] = merged;
        this.nativeSheet[key] = calculatedProps;
      }
    }
  }, {
    key: "calcNative",
    value: function calcNative() {
      if (Object.keys(this.nativeSheet).length) {
        var rnStyleSheet = _reactNative.StyleSheet.create(this.nativeSheet);

        (0, _extends2.default)(this.result, rnStyleSheet);
      }
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "clearResult",
    value: function clearResult() {
      var _this2 = this;

      Object.keys(this.result).forEach(function (key) {
        return delete _this2.result[key];
      });
    }
  }, {
    key: "hasCache",
    value: function hasCache() {
      var key = this.getCacheKey();
      return key && this.cache.has(key);
    }
  }, {
    key: "applyCache",
    value: function applyCache() {
      var cachedResult = this.cache.get(this.getCacheKey());
      (0, _extends2.default)(this.result, cachedResult);
    }
  }, {
    key: "storeCache",
    value: function storeCache() {
      var key = this.getCacheKey();

      if (key) {
        this.cache.set(key, (0, _extends2.default)({}, this.result));
      }
    }
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.cache.clear();
    }
  }, {
    key: "getCacheKey",
    value: function getCacheKey() {
      return this.globalVars && this.globalVars.$theme;
    }
  }]);
  return _default;
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,