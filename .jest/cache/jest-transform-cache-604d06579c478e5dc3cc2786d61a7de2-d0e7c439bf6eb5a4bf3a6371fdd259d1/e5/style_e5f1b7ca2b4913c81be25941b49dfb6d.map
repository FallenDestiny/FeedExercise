{"version":3,"sources":["style.js"],"names":["source","varsArr","processedSource","extractedVars","extractedProps","calculatedVars","calculatedProps","processSource","calcVars","calcProps","tryOutline","mediaQueries","process","vars","extract","varsArrForVars","concat","calcPlainObject","utils","excludeKeys","outline","get","borderWidth","borderColor","getRandomColor","obj","Object","keys","reduce","res","prop","calcStyleValue","value","isNestedValue","Array","isArray","Value","calc","colors","index","Math","round","random","length"],"mappings":"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","sourcesContent":["/**\n * Style\n */\n\nimport vars from './replacers/vars';\nimport mediaQueries from './replacers/media-queries';\nimport Value from './value';\nimport utils from './utils';\n\nexport default class {\n  /**\n   * Constructor\n   * @param {Object} source plain object style with variables\n   * @param {Array} [varsArr] array of vars objects\n   */\n  constructor(source, varsArr = []) {\n    this.source = source;\n    this.varsArr = varsArr;\n    this.processedSource = null;\n    this.extractedVars = null;\n    this.extractedProps = null;\n    this.calculatedVars = null;\n    this.calculatedProps = null;\n  }\n\n  /**\n   * Calculates style\n   * @returns {Object}\n   */\n  calc() {\n    this.processSource();\n    this.calcVars();\n    this.calcProps();\n    this.tryOutline();\n    return {\n      calculatedVars: this.calculatedVars,\n      calculatedProps: this.calculatedProps,\n    };\n  }\n\n  processSource() {\n    this.processedSource = mediaQueries.process(this.source);\n  }\n\n  calcVars() {\n    this.extractedVars = vars.extract(this.processedSource);\n    if (this.extractedVars) {\n      const varsArrForVars = [this.extractedVars].concat(this.varsArr);\n      this.calculatedVars = calcPlainObject(this.extractedVars, varsArrForVars);\n      this.varsArr = [this.calculatedVars].concat(this.varsArr);\n    }\n  }\n\n  calcProps() {\n    this.extractedProps = utils.excludeKeys(this.processedSource, this.extractedVars);\n    this.calculatedProps = calcPlainObject(this.extractedProps, this.varsArr);\n  }\n\n  tryOutline() {\n    let outline = vars.get('$outline', this.varsArr);\n    if (outline) {\n      this.calculatedProps.borderWidth = typeof outline === 'number' ? outline : 1;\n      this.calculatedProps.borderColor = getRandomColor();\n    }\n  }\n\n}\n\n/**\n * Calculates values in plain object\n *\n * @param {Object} obj\n * @param {Array} varsArr\n * @returns {Object}\n */\nfunction calcPlainObject(obj, varsArr) {\n  return Object.keys(obj).reduce((res, prop) => {\n    res[prop] = calcStyleValue(prop, obj[prop], varsArr);\n    return res;\n  }, {});\n}\n\n/**\n * Calculates single value\n * @param {String} prop\n * @param {*} value\n * @param {Array} varsArr\n */\nfunction calcStyleValue(prop, value, varsArr) {\n  const isNestedValue = value && typeof value === 'object' && !Array.isArray(value);\n  return isNestedValue\n    ? calcPlainObject(value, varsArr)\n    : new Value(value, prop, varsArr).calc();\n}\n\n/**\n * Returns random color (needed for outline)\n * @returns {String}\n */\nfunction getRandomColor() {\n  let colors = [\n    'black',\n    'red',\n    'green',\n    'blue',\n  ];\n  let index = Math.round(Math.random() * (colors.length - 1));\n  return colors[index];\n}\n"]}