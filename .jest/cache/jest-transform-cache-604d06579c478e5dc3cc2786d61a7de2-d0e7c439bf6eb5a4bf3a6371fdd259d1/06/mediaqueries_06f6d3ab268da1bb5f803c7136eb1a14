770b971a1382cf7a841769673bd10ed2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reactNative = require("react-native");

var _cssMediaquery = _interopRequireDefault(require("css-mediaquery"));

var _utils = _interopRequireDefault(require("../utils"));

var PREFIX = '@media';
var _default = {
  isMediaQuery: isMediaQuery,
  process: process
};
exports.default = _default;

function isMediaQuery(str) {
  return typeof str === 'string' && str.indexOf(PREFIX) === 0;
}

function process(obj) {
  var mqKeys = [];
  var res = Object.keys(obj).reduce(function (res, key) {
    if (!isMediaQuery(key)) {
      res[key] = obj[key];
    } else {
      mqKeys.push(key);
    }

    return res;
  }, {});

  if (mqKeys.length) {
    var matchObject = getMatchObject();
    mqKeys.forEach(function (key) {
      var mqStr = key.replace(PREFIX, '');

      var isMatch = _cssMediaquery.default.match(mqStr, matchObject);

      if (isMatch) {
        merge(res, obj[key]);
      }
    });
  }

  return res;
}

function getMatchObject() {
  var win = _reactNative.Dimensions.get('window');

  var isRTL = _reactNative.I18nManager.isRTL;
  return {
    width: win.width,
    height: win.height,
    orientation: win.width > win.height ? 'landscape' : 'portrait',
    'aspect-ratio': win.width / win.height,
    type: _reactNative.Platform.OS,
    direction: isRTL ? 'rtl' : 'ltr'
  };
}

function merge(obj, mqObj) {
  Object.keys(mqObj).forEach(function (key) {
    if (_utils.default.isObject(obj[key]) && _utils.default.isObject(mqObj[key])) {
      (0, _extends2.default)(obj[key], mqObj[key]);
    } else {
      obj[key] = mqObj[key];
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lZGlhLXF1ZXJpZXMuanMiXSwibmFtZXMiOlsiUFJFRklYIiwiaXNNZWRpYVF1ZXJ5IiwicHJvY2VzcyIsInN0ciIsImluZGV4T2YiLCJvYmoiLCJtcUtleXMiLCJyZXMiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwia2V5IiwicHVzaCIsImxlbmd0aCIsIm1hdGNoT2JqZWN0IiwiZ2V0TWF0Y2hPYmplY3QiLCJmb3JFYWNoIiwibXFTdHIiLCJyZXBsYWNlIiwiaXNNYXRjaCIsIm1lZGlhUXVlcnkiLCJtYXRjaCIsIm1lcmdlIiwid2luIiwiRGltZW5zaW9ucyIsImdldCIsImlzUlRMIiwiSTE4bk1hbmFnZXIiLCJ3aWR0aCIsImhlaWdodCIsIm9yaWVudGF0aW9uIiwidHlwZSIsIlBsYXRmb3JtIiwiT1MiLCJkaXJlY3Rpb24iLCJtcU9iaiIsInV0aWxzIiwiaXNPYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVVBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLE1BQU0sR0FBRyxRQUFmO2VBRWU7QUFDYkMsRUFBQUEsWUFBWSxFQUFaQSxZQURhO0FBRWJDLEVBQUFBLE9BQU8sRUFBUEE7QUFGYSxDOzs7QUFTZixTQUFTRCxZQUFULENBQXNCRSxHQUF0QixFQUEyQjtBQUN6QixTQUFPLE9BQU9BLEdBQVAsS0FBZSxRQUFmLElBQTJCQSxHQUFHLENBQUNDLE9BQUosQ0FBWUosTUFBWixNQUF3QixDQUExRDtBQUNEOztBQU9ELFNBQVNFLE9BQVQsQ0FBaUJHLEdBQWpCLEVBQXNCO0FBQ3BCLE1BQU1DLE1BQU0sR0FBRyxFQUFmO0FBR0EsTUFBTUMsR0FBRyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUosR0FBWixFQUFpQkssTUFBakIsQ0FBd0IsVUFBQ0gsR0FBRCxFQUFNSSxHQUFOLEVBQWM7QUFDaEQsUUFBSSxDQUFDVixZQUFZLENBQUNVLEdBQUQsQ0FBakIsRUFBd0I7QUFDdEJKLE1BQUFBLEdBQUcsQ0FBQ0ksR0FBRCxDQUFILEdBQVdOLEdBQUcsQ0FBQ00sR0FBRCxDQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0xMLE1BQUFBLE1BQU0sQ0FBQ00sSUFBUCxDQUFZRCxHQUFaO0FBQ0Q7O0FBQ0QsV0FBT0osR0FBUDtBQUNELEdBUFcsRUFPVCxFQVBTLENBQVo7O0FBVUEsTUFBSUQsTUFBTSxDQUFDTyxNQUFYLEVBQW1CO0FBQ2pCLFFBQU1DLFdBQVcsR0FBR0MsY0FBYyxFQUFsQztBQUNBVCxJQUFBQSxNQUFNLENBQUNVLE9BQVAsQ0FBZSxVQUFBTCxHQUFHLEVBQUk7QUFDcEIsVUFBTU0sS0FBSyxHQUFHTixHQUFHLENBQUNPLE9BQUosQ0FBWWxCLE1BQVosRUFBb0IsRUFBcEIsQ0FBZDs7QUFDQSxVQUFNbUIsT0FBTyxHQUFHQyx1QkFBV0MsS0FBWCxDQUFpQkosS0FBakIsRUFBd0JILFdBQXhCLENBQWhCOztBQUNBLFVBQUlLLE9BQUosRUFBYTtBQUNYRyxRQUFBQSxLQUFLLENBQUNmLEdBQUQsRUFBTUYsR0FBRyxDQUFDTSxHQUFELENBQVQsQ0FBTDtBQUNEO0FBQ0YsS0FORDtBQU9EOztBQUVELFNBQU9KLEdBQVA7QUFDRDs7QUFNRCxTQUFTUSxjQUFULEdBQTBCO0FBQ3hCLE1BQU1RLEdBQUcsR0FBR0Msd0JBQVdDLEdBQVgsQ0FBZSxRQUFmLENBQVo7O0FBRHdCLE1BRWhCQyxLQUZnQixHQUVOQyx3QkFGTSxDQUVoQkQsS0FGZ0I7QUFHeEIsU0FBTztBQUNMRSxJQUFBQSxLQUFLLEVBQUVMLEdBQUcsQ0FBQ0ssS0FETjtBQUVMQyxJQUFBQSxNQUFNLEVBQUVOLEdBQUcsQ0FBQ00sTUFGUDtBQUdMQyxJQUFBQSxXQUFXLEVBQUVQLEdBQUcsQ0FBQ0ssS0FBSixHQUFZTCxHQUFHLENBQUNNLE1BQWhCLEdBQXlCLFdBQXpCLEdBQXVDLFVBSC9DO0FBSUwsb0JBQWdCTixHQUFHLENBQUNLLEtBQUosR0FBWUwsR0FBRyxDQUFDTSxNQUozQjtBQUtMRSxJQUFBQSxJQUFJLEVBQUVDLHNCQUFTQyxFQUxWO0FBTUxDLElBQUFBLFNBQVMsRUFBRVIsS0FBSyxHQUFHLEtBQUgsR0FBVztBQU50QixHQUFQO0FBUUQ7O0FBT0QsU0FBU0osS0FBVCxDQUFlakIsR0FBZixFQUFvQjhCLEtBQXBCLEVBQTJCO0FBQ3pCM0IsRUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVkwQixLQUFaLEVBQW1CbkIsT0FBbkIsQ0FBMkIsVUFBQUwsR0FBRyxFQUFJO0FBQ2hDLFFBQUl5QixlQUFNQyxRQUFOLENBQWVoQyxHQUFHLENBQUNNLEdBQUQsQ0FBbEIsS0FBNEJ5QixlQUFNQyxRQUFOLENBQWVGLEtBQUssQ0FBQ3hCLEdBQUQsQ0FBcEIsQ0FBaEMsRUFBNEQ7QUFDMUQsNkJBQWNOLEdBQUcsQ0FBQ00sR0FBRCxDQUFqQixFQUF3QndCLEtBQUssQ0FBQ3hCLEdBQUQsQ0FBN0I7QUFDRCxLQUZELE1BRU87QUFDTE4sTUFBQUEsR0FBRyxDQUFDTSxHQUFELENBQUgsR0FBV3dCLEtBQUssQ0FBQ3hCLEdBQUQsQ0FBaEI7QUFDRDtBQUNGLEdBTkQ7QUFPRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWVkaWEgcXVlcmllc1xuICogU3VwcG9ydGVkIHZhbHVlczpcbiAqIC0gKHR5cGUpIGlvcywgYW5kcm9pZFxuICogLSBoZWlnaHQsIG1pbi1oZWlnaHQsIG1heC1oZWlnaHRcbiAqIC0gd2lkdGgsIG1pbi13aWR0aCwgbWF4LXdpZHRoXG4gKiAtIG9yaWVudGF0aW9uXG4gKiAtIGFzcGVjdC1yYXRpb1xuICovXG5cbmltcG9ydCB7RGltZW5zaW9ucywgUGxhdGZvcm0sIEkxOG5NYW5hZ2VyfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IG1lZGlhUXVlcnkgZnJvbSAnY3NzLW1lZGlhcXVlcnknO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzJztcbiAgICAgIFxuY29uc3QgUFJFRklYID0gJ0BtZWRpYSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNNZWRpYVF1ZXJ5LFxuICBwcm9jZXNzXG59O1xuXG4vKipcbiAqIElzIHN0cmluZyBpcyBtZWRpYSBxdWVyeVxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICovXG5mdW5jdGlvbiBpc01lZGlhUXVlcnkoc3RyKSB7XG4gIHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyAmJiBzdHIuaW5kZXhPZihQUkVGSVgpID09PSAwO1xufVxuXG4vKipcbiAqIFByb2Nlc3MgYW5kIGFwcGx5IG1lZGlhIHF1ZXJpZXMgaW4gb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJucyB7bnVsbHxPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3Mob2JqKSB7XG4gIGNvbnN0IG1xS2V5cyA9IFtdO1xuXG4gIC8vIGNvcHkgbm9uLW1lZGlhLXF1ZXJ5IHN0dWZmXG4gIGNvbnN0IHJlcyA9IE9iamVjdC5rZXlzKG9iaikucmVkdWNlKChyZXMsIGtleSkgPT4ge1xuICAgIGlmICghaXNNZWRpYVF1ZXJ5KGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gb2JqW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG1xS2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH0sIHt9KTtcblxuICAvLyBhcHBseSBtZWRpYSBxdWVyeSBzdHVmZlxuICBpZiAobXFLZXlzLmxlbmd0aCkge1xuICAgIGNvbnN0IG1hdGNoT2JqZWN0ID0gZ2V0TWF0Y2hPYmplY3QoKTtcbiAgICBtcUtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3QgbXFTdHIgPSBrZXkucmVwbGFjZShQUkVGSVgsICcnKTtcbiAgICAgIGNvbnN0IGlzTWF0Y2ggPSBtZWRpYVF1ZXJ5Lm1hdGNoKG1xU3RyLCBtYXRjaE9iamVjdCk7XG4gICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICBtZXJnZShyZXMsIG9ialtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogUmV0dXJucyBvYmplY3QgdG8gbWF0Y2ggbWVkaWEgcXVlcnlcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoT2JqZWN0KCkge1xuICBjb25zdCB3aW4gPSBEaW1lbnNpb25zLmdldCgnd2luZG93Jyk7XG4gIGNvbnN0IHsgaXNSVEwgfSA9IEkxOG5NYW5hZ2VyO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aW4ud2lkdGgsXG4gICAgaGVpZ2h0OiB3aW4uaGVpZ2h0LFxuICAgIG9yaWVudGF0aW9uOiB3aW4ud2lkdGggPiB3aW4uaGVpZ2h0ID8gJ2xhbmRzY2FwZScgOiAncG9ydHJhaXQnLFxuICAgICdhc3BlY3QtcmF0aW8nOiB3aW4ud2lkdGggLyB3aW4uaGVpZ2h0LFxuICAgIHR5cGU6IFBsYXRmb3JtLk9TLFxuICAgIGRpcmVjdGlvbjogaXNSVEwgPyAncnRsJyA6ICdsdHInXG4gIH07XG59XG5cbi8qKlxuICogTWVyZ2UgbWVkaWEgcXVlcnkgb2JqIGludG8gcGFyZW50IG9ialxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtPYmplY3R9IG1xT2JqXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKG9iaiwgbXFPYmopIHtcbiAgT2JqZWN0LmtleXMobXFPYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3Qob2JqW2tleV0pICYmIHV0aWxzLmlzT2JqZWN0KG1xT2JqW2tleV0pKSB7XG4gICAgICBPYmplY3QuYXNzaWduKG9ialtrZXldLCBtcU9ialtrZXldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tleV0gPSBtcU9ialtrZXldO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=