eabee8a74e992d62b226a7852c4a8098
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _rem = _interopRequireDefault(require("./replacers/rem"));

var _vars = _interopRequireDefault(require("./replacers/vars"));

var _percent = _interopRequireDefault(require("./replacers/percent"));

var _operation = _interopRequireDefault(require("./replacers/operation"));

var _scale = _interopRequireDefault(require("./replacers/scale"));

var Value = function () {
  function Value(value, prop) {
    var varsArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    (0, _classCallCheck2.default)(this, Value);
    this.value = value;
    this.outValue = null;
    this.prop = prop;
    this.varsArr = varsArr;
    this.stack = options.stack || [];
    this.isOperation = options.isOperation !== undefined ? options.isOperation : false;
  }

  (0, _createClass2.default)(Value, [{
    key: "calc",
    value: function calc() {
      if (typeof this.value === 'function') {
        this.value = this.value();
      }

      if (typeof this.value === 'string') {
        this.calcString();
      } else {
        this.proxyValue();
      }

      if (this.isFinal()) {
        this.applyScale();
      }

      return this.outValue;
    }
  }, {
    key: "calcString",
    value: function calcString() {
      var actions = [this.tryCalcOperation, this.isOperation ? this.tryCalcPercent : null, this.tryCalcVar, this.tryCalcRem].filter(Boolean);
      var value = this.tryActions(actions, this.value);

      if (value !== null) {
        this.outValue = value;
      } else {
        this.proxyValue();
      }
    }
  }, {
    key: "tryActions",
    value: function tryActions(actions, str) {
      for (var i = 0; i < actions.length; i++) {
        var val = actions[i].call(this, str);

        if (val !== null) {
          return val;
        }
      }

      return null;
    }
  }, {
    key: "tryCalcOperation",
    value: function tryCalcOperation(str) {
      var opInfo = _operation.default.isOperation(str);

      if (!opInfo) {
        return null;
      }

      this.isOperation = true;
      var operands = ['v1', 'v2'];

      for (var i = 0; i < operands.length; i++) {
        var operand = operands[i];
        var operandValue = this.calcOperandValue(opInfo[operand]);

        if (operandValue !== null) {
          opInfo[operand] = operandValue;
        } else {
          return null;
        }
      }

      return _operation.default.exec(opInfo);
    }
  }, {
    key: "calcOperandValue",
    value: function calcOperandValue(str) {
      var actions = [this.tryCalcVar, this.tryCalcPercent, this.tryCalcRem, this.tryCalcFloat];
      return this.tryActions(actions, str);
    }
  }, {
    key: "tryCalcVar",
    value: function tryCalcVar(str) {
      if (_vars.default.isVar(str)) {
        var val = _vars.default.calc(str, this.varsArr);

        if (this.stack.indexOf(str) >= 0) {
          throw new Error('Cyclic reference: ' + this.stack.concat([str]).join(' -> '));
        }

        var options = {
          stack: this.stack.concat([str]),
          isOperation: this.isOperation
        };
        return new Value(val, str, this.varsArr, options).calc();
      } else {
        return null;
      }
    }
  }, {
    key: "tryCalcPercent",
    value: function tryCalcPercent(str) {
      if (_percent.default.isPercent(str)) {
        return _percent.default.calc(str, this.prop);
      }

      return null;
    }
  }, {
    key: "tryCalcRem",
    value: function tryCalcRem(str) {
      if (_rem.default.isRem(str)) {
        var remValue = _vars.default.get('$rem', this.varsArr);

        return _rem.default.calc(str, remValue);
      } else {
        return null;
      }
    }
  }, {
    key: "tryCalcFloat",
    value: function tryCalcFloat(str) {
      var val = parseFloat(str);
      return !isNaN(val) ? val : null;
    }
  }, {
    key: "isFinal",
    value: function isFinal() {
      return !this.stack.length;
    }
  }, {
    key: "proxyValue",
    value: function proxyValue() {
      this.outValue = this.value;
    }
  }, {
    key: "applyScale",
    value: function applyScale() {
      if (_vars.default.isVar(this.prop)) {
        return;
      }

      var scaleFactor = _vars.default.get('$scale', this.varsArr) || 1;

      if (scaleFactor === 1) {
        return;
      }

      if (_scale.default.isScalable(this.outValue, this.prop)) {
        this.outValue = _scale.default.calc(this.outValue, scaleFactor);
      }
    }
  }]);
  return Value;
}();

exports.default = Value;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,