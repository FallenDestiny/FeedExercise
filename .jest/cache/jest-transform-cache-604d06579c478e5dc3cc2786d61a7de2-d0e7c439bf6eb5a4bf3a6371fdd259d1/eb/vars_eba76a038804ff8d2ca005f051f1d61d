7c7615f77a3477f301de00d5a9d15f06
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectResolvePath = _interopRequireDefault(require("object-resolve-path"));

var PREFIX = '$';
var _default = {
  isVar: isVar,
  calc: calc,
  extract: extract,
  get: get
};
exports.default = _default;

function isVar(str) {
  return typeof str === 'string' && str.charAt(0) === PREFIX;
}

function calc(str, varsArr) {
  var realValue = get(str, varsArr);

  if (realValue === undefined) {
    throw new Error("Unresolved variable: " + str);
  }

  return realValue;
}

function extract(obj) {
  return Object.keys(obj).reduce(function (res, key) {
    if (isVar(key)) {
      res = res || {};
      res[key] = obj[key];
    }

    return res;
  }, null);
}

function get(name, varsArr) {
  if (!Array.isArray(varsArr)) {
    throw new Error('You should pass vars array to vars.get()');
  }

  var rootVar = name.match(/[^.[]*/)[0];
  var isSimpleVar = rootVar === name;

  for (var i = 0; i < varsArr.length; i++) {
    var vars = varsArr[i];

    if (!vars || vars[rootVar] === undefined) {
      continue;
    }

    if (isSimpleVar) {
      return vars[name];
    }

    try {
      return (0, _objectResolvePath.default)((0, _defineProperty2.default)({}, rootVar, vars[rootVar]), name);
    } catch (error) {
      return undefined;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhcnMuanMiXSwibmFtZXMiOlsiUFJFRklYIiwiaXNWYXIiLCJjYWxjIiwiZXh0cmFjdCIsImdldCIsInN0ciIsImNoYXJBdCIsInZhcnNBcnIiLCJyZWFsVmFsdWUiLCJ1bmRlZmluZWQiLCJFcnJvciIsIm9iaiIsIk9iamVjdCIsImtleXMiLCJyZWR1Y2UiLCJyZXMiLCJrZXkiLCJuYW1lIiwiQXJyYXkiLCJpc0FycmF5Iiwicm9vdFZhciIsIm1hdGNoIiwiaXNTaW1wbGVWYXIiLCJpIiwibGVuZ3RoIiwidmFycyIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFJQTs7QUFFQSxJQUFNQSxNQUFNLEdBQUcsR0FBZjtlQUVlO0FBQ2JDLEVBQUFBLEtBQUssRUFBTEEsS0FEYTtBQUViQyxFQUFBQSxJQUFJLEVBQUpBLElBRmE7QUFHYkMsRUFBQUEsT0FBTyxFQUFQQSxPQUhhO0FBSWJDLEVBQUFBLEdBQUcsRUFBSEE7QUFKYSxDOzs7QUFXZixTQUFTSCxLQUFULENBQWVJLEdBQWYsRUFBb0I7QUFDbEIsU0FBTyxPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQkEsR0FBRyxDQUFDQyxNQUFKLENBQVcsQ0FBWCxNQUFrQk4sTUFBcEQ7QUFDRDs7QUFPRCxTQUFTRSxJQUFULENBQWNHLEdBQWQsRUFBbUJFLE9BQW5CLEVBQTRCO0FBQzFCLE1BQUlDLFNBQVMsR0FBR0osR0FBRyxDQUFDQyxHQUFELEVBQU1FLE9BQU4sQ0FBbkI7O0FBQ0EsTUFBSUMsU0FBUyxLQUFLQyxTQUFsQixFQUE2QjtBQUMzQixVQUFNLElBQUlDLEtBQUosMkJBQWtDTCxHQUFsQyxDQUFOO0FBQ0Q7O0FBQ0QsU0FBT0csU0FBUDtBQUNEOztBQU9ELFNBQVNMLE9BQVQsQ0FBaUJRLEdBQWpCLEVBQXNCO0FBQ3BCLFNBQU9DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixHQUFaLEVBQWlCRyxNQUFqQixDQUF3QixVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUMzQyxRQUFJZixLQUFLLENBQUNlLEdBQUQsQ0FBVCxFQUFnQjtBQUNkRCxNQUFBQSxHQUFHLEdBQUdBLEdBQUcsSUFBSSxFQUFiO0FBQ0FBLE1BQUFBLEdBQUcsQ0FBQ0MsR0FBRCxDQUFILEdBQVdMLEdBQUcsQ0FBQ0ssR0FBRCxDQUFkO0FBQ0Q7O0FBQ0QsV0FBT0QsR0FBUDtBQUNELEdBTk0sRUFNSixJQU5JLENBQVA7QUFPRDs7QUFPRCxTQUFTWCxHQUFULENBQWFhLElBQWIsRUFBbUJWLE9BQW5CLEVBQTRCO0FBQzFCLE1BQUksQ0FBQ1csS0FBSyxDQUFDQyxPQUFOLENBQWNaLE9BQWQsQ0FBTCxFQUE2QjtBQUMzQixVQUFNLElBQUlHLEtBQUosQ0FBVSwwQ0FBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBTVUsT0FBTyxHQUFHSCxJQUFJLENBQUNJLEtBQUwsQ0FBVyxRQUFYLEVBQXFCLENBQXJCLENBQWhCO0FBQ0EsTUFBTUMsV0FBVyxHQUFHRixPQUFPLEtBQUtILElBQWhDOztBQUdBLE9BQUssSUFBSU0sQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2hCLE9BQU8sQ0FBQ2lCLE1BQTVCLEVBQW9DRCxDQUFDLEVBQXJDLEVBQXlDO0FBQ3ZDLFFBQUlFLElBQUksR0FBR2xCLE9BQU8sQ0FBQ2dCLENBQUQsQ0FBbEI7O0FBQ0EsUUFBSSxDQUFDRSxJQUFELElBQVNBLElBQUksQ0FBQ0wsT0FBRCxDQUFKLEtBQWtCWCxTQUEvQixFQUEwQztBQUN4QztBQUNEOztBQUNELFFBQUlhLFdBQUosRUFBaUI7QUFDZixhQUFPRyxJQUFJLENBQUNSLElBQUQsQ0FBWDtBQUNEOztBQUNELFFBQUk7QUFDRixhQUFPLGtFQUFjRyxPQUFkLEVBQXdCSyxJQUFJLENBQUNMLE9BQUQsQ0FBNUIsR0FBd0NILElBQXhDLENBQVA7QUFDRCxLQUZELENBRUUsT0FBT1MsS0FBUCxFQUFjO0FBQ2QsYUFBT2pCLFNBQVA7QUFDRDtBQUNGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFZhcmlhYmxlc1xuICovXG5cbmltcG9ydCByZXNvbHZlUGF0aCBmcm9tICdvYmplY3QtcmVzb2x2ZS1wYXRoJztcblxuY29uc3QgUFJFRklYID0gJyQnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzVmFyLFxuICBjYWxjLFxuICBleHRyYWN0LFxuICBnZXQsXG59O1xuXG4vKipcbiAqIElzIHN0cmluZyBlcXVhbHMgdG8gYW5vdGhlciB2YXJpYWJsZTogJyR2YXJOYW1lJ1xuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICovXG5mdW5jdGlvbiBpc1ZhcihzdHIpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnICYmIHN0ci5jaGFyQXQoMCkgPT09IFBSRUZJWDtcbn1cblxuLyoqXG4gKiBSZXBsYWNlIHZhciB3aXRoIHZhbHVlIGZyb20gdmFycyBhcnIuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIHZhcmlhYmxlIG5hbWUgd2l0aCAkLCBlLmcuICckY29sb3InXG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IHZhcnNBcnIgYXJyYXkgb2YgdmFyaWFibGUgc2V0cyB0byBzZWFyY2ggaW50by5cbiAqL1xuZnVuY3Rpb24gY2FsYyhzdHIsIHZhcnNBcnIpIHtcbiAgbGV0IHJlYWxWYWx1ZSA9IGdldChzdHIsIHZhcnNBcnIpO1xuICBpZiAocmVhbFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVzb2x2ZWQgdmFyaWFibGU6ICR7c3RyfWApO1xuICB9XG4gIHJldHVybiByZWFsVmFsdWU7XG59XG5cbi8qKlxuICogRXh0cmFjdCB2YXJpYWJsZXMgZnJvbSBtaXhlZCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm5zIHtudWxsfE9iamVjdH1cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKChyZXMsIGtleSkgPT4ge1xuICAgIGlmIChpc1ZhcihrZXkpKSB7XG4gICAgICByZXMgPSByZXMgfHwge307XG4gICAgICByZXNba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9LCBudWxsKTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdmFyaWFibGUgdmFsdWUgdXNpbmcgcHJvdmlkZWQgYXJyYXkgb2YgdmFyaWFibGUgc2V0c1xuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgdmFyaWFibGUgd2l0aCAkLCBlLmcuICckbXlWYXInXG4gKiBAcGFyYW0ge0FycmF5fSB2YXJzQXJyIGFycmF5IG9mIHZhcmlhYmxlIHNldHNcbiAqL1xuZnVuY3Rpb24gZ2V0KG5hbWUsIHZhcnNBcnIpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhcnNBcnIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3Ugc2hvdWxkIHBhc3MgdmFycyBhcnJheSB0byB2YXJzLmdldCgpJyk7XG4gIH1cblxuICBjb25zdCByb290VmFyID0gbmFtZS5tYXRjaCgvW14uW10qLylbMF07XG4gIGNvbnN0IGlzU2ltcGxlVmFyID0gcm9vdFZhciA9PT0gbmFtZTtcblxuICAvLyB0b2RvOiB1c2UgZm9yLi4gb2YgYWZ0ZXIgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9pc3N1ZXMvNDY3NlxuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhcnNBcnIubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgdmFycyA9IHZhcnNBcnJbaV07XG4gICAgaWYgKCF2YXJzIHx8IHZhcnNbcm9vdFZhcl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChpc1NpbXBsZVZhcikge1xuICAgICAgcmV0dXJuIHZhcnNbbmFtZV07XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZVBhdGgoe1tyb290VmFyXTogdmFyc1tyb290VmFyXX0sIG5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuIl19